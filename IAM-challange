provider "aws" {
  region = "eu-west-1"

}

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

#### IAM - User #####

resource "aws_iam_user" "iam_user" {
  name = "KWhitaker"

}

#### IAM-user-policy-attachment ####

resource "aws_iam_user_policy_attachment" "AmazonS3ReadOnlyAccess" {
  user       = aws_iam_user.iam_user.name
  policy_arn = aws_iam_policy.AmazonS3ReadOnlyAccess.arn
}

#### IAM Policy - Read Only Access #####

resource "aws_iam_policy" "AmazonS3ReadOnlyAccess" {
  name        = "AmazonS3ReadOnlyAccess"
  path        = "/"
  description = "Directors Policy"

  # Terraform's "jsonencode" function converts a
  # Terraform expression result to valid JSON syntax.
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "s3:Get*",
          "s3:List*",
          "s3:Describe*",
          "s3-object-lambda:Get*",
          "s3-object-lambda:List*",
          "sts:AssumeRole"
        ]
        Effect   = "Allow"
        Action   = "*"
        Resource = "*"
      },
    ]
  })
}

#####  IAM Role #####

resource "aws_iam_role" "ReadOnlyS3AccessRole" {
  name = "ReadOnlyS3AccessRole"

  # Terraform's "jsonencode" function converts a
  # Terraform expression result to valid JSON syntax.
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Sid    = ""
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      },
    ]
  })

  tags = {
    Owner = "Kevin"
  }
}

##### IAM Role-Policy Attachment #####

resource "aws_iam_role_policy_attachment" "test-attach" {
  role       = aws_iam_role.ReadOnlyS3AccessRole.name
  policy_arn = aws_iam_policy.AmazonS3ReadOnlyAccess.arn
}

##### Outputs #####
output "role_arn" {
  value = aws_iam_role.ReadOnlyS3AccessRole.arn
}

output "user_name" {
  value = aws_iam_user.iam_user.name
}
